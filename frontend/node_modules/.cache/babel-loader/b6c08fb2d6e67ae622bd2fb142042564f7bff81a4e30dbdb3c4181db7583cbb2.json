{"ast":null,"code":"var _jsxFileName = \"E:\\\\Task_Manager_APP\\\\frontend\\\\src\\\\components\\\\TaskList.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport TaskItem from './TaskItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskList() {\n  _s();\n  const [tasks, setTasks] = useState([]); // Initialize state as an empty array\n\n  useEffect(() => {\n    // Fetch tasks from API\n    fetch(\"http://localhost:8000/tasks/\").then(response => response.json()).then(data => setTasks(data)).catch(error => console.error(\"Error fetching tasks:\", error));\n  }, []);\n\n  // Ensure tasks is always an array before calling map\n  if (!Array.isArray(tasks)) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 12\n    }, this); // You can show a loading indicator if tasks are not an array\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: tasks.map(task => /*#__PURE__*/_jsxDEV(TaskItem, {\n      task: task\n    }, task.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskList, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","TaskItem","jsxDEV","_jsxDEV","TaskList","_s","tasks","setTasks","useState","useEffect","fetch","then","response","json","data","catch","error","console","Array","isArray","children","fileName","_jsxFileName","lineNumber","columnNumber","map","task","id","_c","$RefreshReg$"],"sources":["E:/Task_Manager_APP/frontend/src/components/TaskList.js"],"sourcesContent":["import React from 'react';\r\nimport TaskItem from './TaskItem';\r\n\r\nfunction TaskList() {\r\n  const [tasks, setTasks] = useState([]);  // Initialize state as an empty array\r\n\r\n  useEffect(() => {\r\n    // Fetch tasks from API\r\n    fetch(\"http://localhost:8000/tasks/\")\r\n      .then(response => response.json())\r\n      .then(data => setTasks(data))\r\n      .catch(error => console.error(\"Error fetching tasks:\", error));\r\n  }, []);\r\n\r\n  // Ensure tasks is always an array before calling map\r\n  if (!Array.isArray(tasks)) {\r\n    return <p>Loading...</p>;  // You can show a loading indicator if tasks are not an array\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {tasks.map(task => (\r\n        <TaskItem key={task.id} task={task} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default TaskList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;;EAEzCC,SAAS,CAAC,MAAM;IACd;IACAC,KAAK,CAAC,8BAA8B,CAAC,CAClCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAIP,QAAQ,CAACO,IAAI,CAAC,CAAC,CAC5BC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC,CAAC;EAClE,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,IAAI,CAACE,KAAK,CAACC,OAAO,CAACb,KAAK,CAAC,EAAE;IACzB,oBAAOH,OAAA;MAAAiB,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,CAAC,CAAE;EAC7B;EAEA,oBACErB,OAAA;IAAAiB,QAAA,EACGd,KAAK,CAACmB,GAAG,CAACC,IAAI,iBACbvB,OAAA,CAACF,QAAQ;MAAeyB,IAAI,EAAEA;IAAK,GAApBA,IAAI,CAACC,EAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CACtC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACnB,EAAA,CAvBQD,QAAQ;AAAAwB,EAAA,GAARxB,QAAQ;AA0BjB,eAAeA,QAAQ;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}