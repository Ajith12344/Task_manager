{"ast":null,"code":"var _jsxFileName = \"E:\\\\Task_Manager_APP\\\\frontend\\\\src\\\\components\\\\TaskList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskList() {\n  _s();\n  const [tasks, setTasks] = useState([]); // Initial state set to an empty array\n  const [loading, setLoading] = useState(true); // To handle loading state\n  const [error, setError] = useState(null); // To handle any errors\n\n  useEffect(() => {\n    // Fetch tasks from the API\n    fetch('http://127.0.0.1:8000/api/').then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      if (Array.isArray(data)) {\n        setTasks(data);\n      } else {\n        console.error('Expected an array but received:', data);\n        setTasks([]); // Set an empty array if the data is not in expected format\n      }\n      setLoading(false); // Set loading to false after data is fetched\n    }).catch(error => {\n      console.error('Error fetching tasks:', error);\n      setError(error.message); // Store error message if the fetch fails\n      setLoading(false); // Set loading to false even if there's an error\n    });\n  }, []); // Empty dependency array to fetch data once on mount\n\n  // If data is still loading\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading tasks...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If there was an error fetching the tasks\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Render the tasks list\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: tasks.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No tasks available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this) : tasks.map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: task.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: task.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this)]\n    }, task.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskList, \"qwRs5Xd4E7WtXCZK9zh6nomhOw4=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TaskList","_s","tasks","setTasks","loading","setLoading","error","setError","fetch","then","response","ok","Error","json","data","Array","isArray","console","catch","message","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","task","title","description","id","_c","$RefreshReg$"],"sources":["E:/Task_Manager_APP/frontend/src/components/TaskList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction TaskList() {\r\n  const [tasks, setTasks] = useState([]);  // Initial state set to an empty array\r\n  const [loading, setLoading] = useState(true);  // To handle loading state\r\n  const [error, setError] = useState(null);     // To handle any errors\r\n\r\n  useEffect(() => {\r\n    // Fetch tasks from the API\r\n    fetch('http://127.0.0.1:8000/api/')\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        if (Array.isArray(data)) {\r\n          setTasks(data);\r\n        } else {\r\n          console.error('Expected an array but received:', data);\r\n          setTasks([]);  // Set an empty array if the data is not in expected format\r\n        }\r\n        setLoading(false);  // Set loading to false after data is fetched\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching tasks:', error);\r\n        setError(error.message);  // Store error message if the fetch fails\r\n        setLoading(false);        // Set loading to false even if there's an error\r\n      });\r\n  }, []);  // Empty dependency array to fetch data once on mount\r\n\r\n  // If data is still loading\r\n  if (loading) {\r\n    return <div>Loading tasks...</div>;\r\n  }\r\n\r\n  // If there was an error fetching the tasks\r\n  if (error) {\r\n    return <div>Error: {error}</div>;\r\n  }\r\n\r\n  // Render the tasks list\r\n  return (\r\n    <div>\r\n      {tasks.length === 0 ? (\r\n        <p>No tasks available</p>\r\n      ) : (\r\n        tasks.map((task) => (\r\n          <div key={task.id}>\r\n            <h3>{task.title}</h3>\r\n            <p>{task.description}</p>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}