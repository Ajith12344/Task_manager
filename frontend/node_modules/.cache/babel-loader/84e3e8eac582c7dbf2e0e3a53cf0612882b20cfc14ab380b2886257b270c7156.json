{"ast":null,"code":"import axios from 'axios';\n\n// Create an instance of Axios with baseURL for the Django API\nconst API = axios.create({\n  baseURL: 'http://localhost:8000/api/'\n});\n\n// Add request interceptor to include Authorization header with JWT token\nAPI.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Add response interceptor to handle 401 errors and attempt token refresh\nAPI.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const refreshToken = localStorage.getItem('refresh');\n      if (!refreshToken) throw new Error('No refresh token available');\n\n      // Attempt to refresh the token\n      const {\n        data\n      } = await axios.post('http://localhost:8000/api/token/refresh/', {\n        refresh: refreshToken\n      });\n      const newAccessToken = data.access;\n      localStorage.setItem('token', newAccessToken);\n      originalRequest.headers['Authorization'] = `Bearer ${newAccessToken}`;\n\n      // Retry original request with new access token\n      return API(originalRequest);\n    } catch (refreshError) {\n      console.error('Token refresh failed:', refreshError);\n      // Optional: redirect to login if token refresh fails\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\n\n// API service functions\nexport const fetchTasks = () => API.get('tasks/');\nexport const createTask = newTask => API.post('tasks/', newTask);\nexport const updateTask = (taskId, updatedTask) => API.put(`tasks/${taskId}/`, updatedTask);\nexport const deleteTask = taskId => API.delete(`tasks/${taskId}/`);","map":{"version":3,"names":["axios","API","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","response","_error$response","originalRequest","status","_retry","refreshToken","Error","data","post","refresh","newAccessToken","access","setItem","refreshError","console","window","location","href","fetchTasks","get","createTask","newTask","updateTask","taskId","updatedTask","put","deleteTask","delete"],"sources":["E:/Task_Manager_APP/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create an instance of Axios with baseURL for the Django API\r\nconst API = axios.create({\r\n  baseURL: 'http://localhost:8000/api/',\r\n});\r\n\r\n// Add request interceptor to include Authorization header with JWT token\r\nAPI.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Add response interceptor to handle 401 errors and attempt token refresh\r\nAPI.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n    if (error.response?.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n      try {\r\n        const refreshToken = localStorage.getItem('refresh');\r\n        if (!refreshToken) throw new Error('No refresh token available');\r\n\r\n        // Attempt to refresh the token\r\n        const { data } = await axios.post('http://localhost:8000/api/token/refresh/', {\r\n          refresh: refreshToken,\r\n        });\r\n\r\n        const newAccessToken = data.access;\r\n        localStorage.setItem('token', newAccessToken);\r\n        originalRequest.headers['Authorization'] = `Bearer ${newAccessToken}`;\r\n\r\n        // Retry original request with new access token\r\n        return API(originalRequest);\r\n      } catch (refreshError) {\r\n        console.error('Token refresh failed:', refreshError);\r\n        // Optional: redirect to login if token refresh fails\r\n        window.location.href = '/login';\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// API service functions\r\nexport const fetchTasks = () => API.get('tasks/');\r\nexport const createTask = (newTask) => API.post('tasks/', newTask);\r\nexport const updateTask = (taskId, updatedTask) => API.put(`tasks/${taskId}/`, updatedTask);\r\nexport const deleteTask = (taskId) => API.delete(`tasks/${taskId}/`);\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACAX,GAAG,CAACG,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACtB,MAAOH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACf,MAAMC,eAAe,GAAGL,KAAK,CAACL,MAAM;EACpC,IAAI,EAAAS,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,MAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC7DF,eAAe,CAACE,MAAM,GAAG,IAAI;IAC7B,IAAI;MACF,MAAMC,YAAY,GAAGX,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC;MACpD,IAAI,CAACU,YAAY,EAAE,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;;MAEhE;MACA,MAAM;QAAEC;MAAK,CAAC,GAAG,MAAMtB,KAAK,CAACuB,IAAI,CAAC,0CAA0C,EAAE;QAC5EC,OAAO,EAAEJ;MACX,CAAC,CAAC;MAEF,MAAMK,cAAc,GAAGH,IAAI,CAACI,MAAM;MAClCjB,YAAY,CAACkB,OAAO,CAAC,OAAO,EAAEF,cAAc,CAAC;MAC7CR,eAAe,CAACN,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUc,cAAc,EAAE;;MAErE;MACA,OAAOxB,GAAG,CAACgB,eAAe,CAAC;IAC7B,CAAC,CAAC,OAAOW,YAAY,EAAE;MACrBC,OAAO,CAACjB,KAAK,CAAC,uBAAuB,EAAEgB,YAAY,CAAC;MACpD;MACAE,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;IACjC;EACF;EACA,OAAOnB,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMqB,UAAU,GAAGA,CAAA,KAAMhC,GAAG,CAACiC,GAAG,CAAC,QAAQ,CAAC;AACjD,OAAO,MAAMC,UAAU,GAAIC,OAAO,IAAKnC,GAAG,CAACsB,IAAI,CAAC,QAAQ,EAAEa,OAAO,CAAC;AAClE,OAAO,MAAMC,UAAU,GAAGA,CAACC,MAAM,EAAEC,WAAW,KAAKtC,GAAG,CAACuC,GAAG,CAAC,SAASF,MAAM,GAAG,EAAEC,WAAW,CAAC;AAC3F,OAAO,MAAME,UAAU,GAAIH,MAAM,IAAKrC,GAAG,CAACyC,MAAM,CAAC,SAASJ,MAAM,GAAG,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}