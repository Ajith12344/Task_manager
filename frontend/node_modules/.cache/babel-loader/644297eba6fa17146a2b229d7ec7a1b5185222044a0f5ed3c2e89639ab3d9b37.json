{"ast":null,"code":"const API_URL = 'http://127.0.0.1:8000/tasks/'; // Replace with your actual Django API URL\n\n// Function to get all tasks\nexport const getTasks = async () => {\n  try {\n    const response = await fetch(`${API_URL}list/`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch tasks');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching tasks:', error);\n    throw error;\n  }\n};\n\n// Function to get a task by ID\nexport const getTaskById = async taskId => {\n  try {\n    const response = await fetch(`${API_URL}${taskId}/`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch task with ID: ${taskId}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(`Error fetching task with ID ${taskId}:`, error);\n    throw error;\n  }\n};\n\n// Function to create a new task\nexport const createTask = async taskData => {\n  try {\n    const response = await fetch(API_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(taskData)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create task');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error creating task:', error);\n    throw error;\n  }\n};\n\n// Function to update an existing task\nexport const updateTask = async (taskId, taskData) => {\n  try {\n    const response = await fetch(`${API_URL}${taskId}/update/`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(taskData)\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to update task with ID: ${taskId}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(`Error updating task with ID ${taskId}:`, error);\n    throw error;\n  }\n};\n\n// Function to delete a task\nexport const deleteTask = async taskId => {\n  try {\n    const response = await fetch(`${API_URL}${taskId}/delete/`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to delete task with ID: ${taskId}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(`Error deleting task with ID ${taskId}:`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_URL","getTasks","response","fetch","ok","Error","json","error","console","getTaskById","taskId","createTask","taskData","method","headers","body","JSON","stringify","updateTask","deleteTask"],"sources":["E:/Task_Manager_APP/frontend/src/services/api.js"],"sourcesContent":["const API_URL = 'http://127.0.0.1:8000/tasks/';  // Replace with your actual Django API URL\r\n\r\n// Function to get all tasks\r\nexport const getTasks = async () => {\r\n  try {\r\n    const response = await fetch(`${API_URL}list/`);\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch tasks');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching tasks:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to get a task by ID\r\nexport const getTaskById = async (taskId) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}${taskId}/`);\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch task with ID: ${taskId}`);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(`Error fetching task with ID ${taskId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to create a new task\r\nexport const createTask = async (taskData) => {\r\n  try {\r\n    const response = await fetch(API_URL, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(taskData),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to create task');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error creating task:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to update an existing task\r\nexport const updateTask = async (taskId, taskData) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}${taskId}/update/`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(taskData),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to update task with ID: ${taskId}`);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(`Error updating task with ID ${taskId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to delete a task\r\nexport const deleteTask = async (taskId) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}${taskId}/delete/`, {\r\n      method: 'DELETE',\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to delete task with ID: ${taskId}`);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(`Error deleting task with ID ${taskId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}