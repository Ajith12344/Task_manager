{"ast":null,"code":"// frontend/src/services/api.js\nimport axios from 'axios';\nconst API = axios.create({\n  baseURL: 'http://localhost:8000/api/'\n});\n\n// Request interceptor to add the token to headers\nAPI.interceptors.request.use(config => {\n  const token = localStorage.getItem('token'); // Retrieve access token from localStorage\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Response interceptor to handle token expiration\nAPI.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n  if (error.response && error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    const refreshToken = localStorage.getItem('refresh');\n    try {\n      // Request a new access token using the refresh token\n      const {\n        data\n      } = await axios.post('http://localhost:8000/api/token/refresh/', {\n        refresh: refreshToken\n      });\n      const newAccessToken = data.access;\n      localStorage.setItem('token', newAccessToken);\n\n      // Update the authorization header in the original request\n      originalRequest.headers['Authorization'] = `Bearer ${newAccessToken}`;\n\n      // Retry the original request with the new token\n      return API(originalRequest);\n    } catch (refreshError) {\n      console.error('Token refresh failed:', refreshError);\n      // Optionally redirect to login if the refresh fails\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Define your API calls\nexport const fetchTasks = () => API.get('tasks/');\nexport const createTask = newTask => API.post('tasks/', newTask);\nexport default API;","map":{"version":3,"names":["axios","API","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","response","originalRequest","status","_retry","refreshToken","data","post","refresh","newAccessToken","access","setItem","refreshError","console","fetchTasks","get","createTask","newTask"],"sources":["E:/Task_Manager_APP/frontend/src/services/api.js"],"sourcesContent":["// frontend/src/services/api.js\r\nimport axios from 'axios';\r\n\r\nconst API = axios.create({\r\n  baseURL: 'http://localhost:8000/api/',\r\n});\r\n\r\n// Request interceptor to add the token to headers\r\nAPI.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token'); // Retrieve access token from localStorage\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Response interceptor to handle token expiration\r\nAPI.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n\r\n    if (error.response && error.response.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n      const refreshToken = localStorage.getItem('refresh');\r\n\r\n      try {\r\n        // Request a new access token using the refresh token\r\n        const { data } = await axios.post('http://localhost:8000/api/token/refresh/', {\r\n          refresh: refreshToken,\r\n        });\r\n        \r\n        const newAccessToken = data.access;\r\n        localStorage.setItem('token', newAccessToken);\r\n        \r\n        // Update the authorization header in the original request\r\n        originalRequest.headers['Authorization'] = `Bearer ${newAccessToken}`;\r\n        \r\n        // Retry the original request with the new token\r\n        return API(originalRequest);\r\n      } catch (refreshError) {\r\n        console.error('Token refresh failed:', refreshError);\r\n        // Optionally redirect to login if the refresh fails\r\n      }\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Define your API calls\r\nexport const fetchTasks = () => API.get('tasks/');\r\nexport const createTask = (newTask) => API.post('tasks/', newTask);\r\n\r\nexport default API;\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EAC7C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACAX,GAAG,CAACG,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACtB,MAAOH,KAAK,IAAK;EACf,MAAMI,eAAe,GAAGJ,KAAK,CAACL,MAAM;EAEpC,IAAIK,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC9EF,eAAe,CAACE,MAAM,GAAG,IAAI;IAC7B,MAAMC,YAAY,GAAGV,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC;IAEpD,IAAI;MACF;MACA,MAAM;QAAEU;MAAK,CAAC,GAAG,MAAMpB,KAAK,CAACqB,IAAI,CAAC,0CAA0C,EAAE;QAC5EC,OAAO,EAAEH;MACX,CAAC,CAAC;MAEF,MAAMI,cAAc,GAAGH,IAAI,CAACI,MAAM;MAClCf,YAAY,CAACgB,OAAO,CAAC,OAAO,EAAEF,cAAc,CAAC;;MAE7C;MACAP,eAAe,CAACL,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUY,cAAc,EAAE;;MAErE;MACA,OAAOtB,GAAG,CAACe,eAAe,CAAC;IAC7B,CAAC,CAAC,OAAOU,YAAY,EAAE;MACrBC,OAAO,CAACf,KAAK,CAAC,uBAAuB,EAAEc,YAAY,CAAC;MACpD;IACF;EACF;EAEA,OAAOb,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMgB,UAAU,GAAGA,CAAA,KAAM3B,GAAG,CAAC4B,GAAG,CAAC,QAAQ,CAAC;AACjD,OAAO,MAAMC,UAAU,GAAIC,OAAO,IAAK9B,GAAG,CAACoB,IAAI,CAAC,QAAQ,EAAEU,OAAO,CAAC;AAElE,eAAe9B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}